---
AWSTemplateFormatVersion: 2010-09-09

Description: Stack template for running OryFM with Hydra

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - InstanceType
          - KeyName
      - Label:
          default: "Domain Configuration"
        Parameters:
          - OryFmDomainName
          - HydraPublicDomainName
          - HydraAdminDomainName
      - Label:
          default: "Let's Encrypt"
        Parameters:
          - LetsEncryptEmailAddress
      - Label:
          default: "OryFM Configuration"
        Parameters:
          - OryFmUserLoginRememberTime
          - OryFmUserConsentRememberTime
          - OryFmThemeCssUrl
          - OryFmCustomLabelsUrl
          - OryFmAuthenticationMethod
          - OryFmTestMode
      - Label:
          default: "FileMaker Configuration"
        Parameters:
          - FileMakerUrl
          - FileMakerDatabase
          - FileMakerUsername
          - FileMakerPassword
          - FileMakerLayout

Parameters:

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII characters.

  OryFmDomainName:
    Type: String
    AllowedPattern: (([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])
  HydraPublicDomainName:
    Type: String
    AllowedPattern: (([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])
  HydraAdminDomainName:
    Type: String
    AllowedPattern: (([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])

  LetsEncryptEmailAddress:
    Type: String

  OryFmUserLoginRememberTime:
    Description: How long to remember login when user checks box (set to 0 to disable)
    Type: Number
    MinValue: 0
    Default: 2592000
  OryFmUserConsentRememberTime:
    Description: How long to remember consent when user checks box (set to 0 to disable)
    Type: Number
    MinValue: 0
    Default: 2592000
  OryFmThemeCssUrl:
    Description: Optional URL for custom OryFM theme
    Type: String
  OryFmCustomLabelsUrl:
    Description: Optional URL for custom labels
    Type: String
  OryFmAuthenticationMethod:
    Description: Whether to run OryFM in test mode
    Type: String
    AllowedValues:
      - password-hash
      - basic-auth
    Default: password-hash
  OryFmTestMode:
    Description: Whether to run OryFM in test mode
    Type: String
    AllowedValues:
      - true
      - ''
    Default: ''

  FileMakerUrl:
    Type: String
    AllowedPattern: https?://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])
  FileMakerDatabase:
    Type: String
  FileMakerUsername:
    Type: String
  FileMakerPassword:
    Type: String
    NoEcho: true
  FileMakerLayout:
    Type: String

Mappings:

  RegionMap:
    us-east-1:
      AMI: ami-00a208c7cdba991ea
    us-east-2:
      AMI: ami-059d836af932792c3
    us-west-1:
      AMI: ami-0f42d8c4eb586ccf7
    us-west-2:
      AMI: ami-0a7d051a1c4b54f65

Resources:
  # VPS
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.61.0/22

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  FirstPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.61.0/26
      MapPublicIpOnLaunch: true

  SecondPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.61.64/26
      MapPublicIpOnLaunch: true

  PublicSubnetsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  FirstPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FirstPublicSubnet
      RouteTableId: !Ref PublicSubnetsRouteTable

  SecondPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecondPublicSubnet
      RouteTableId: !Ref PublicSubnetsRouteTable

  PublicSubnetsInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Secrets
  HydraAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret for Hydra Admin
      GenerateSecretString:
        PasswordLength: 32
        ExcludePunctuation: true

  # EC2
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow

  DeploymentPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SecretsRead
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Ref HydraAdminSecret
      Roles:
        - !Ref DeploymentRole

  DeploymentProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DeploymentRole
      Path: /

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to host
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        # Public HTTP access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Public HTTPS access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Public SSH access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  InstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebInstance
    DependsOn: InternetGatewayVpcAttachment

  WebInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref DeploymentProfile
      SubnetId: !Ref FirstPublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          apt-get update -y
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          python /usr/lib/python2.7/dist-packages/easy_install.py \
            --script-dir /opt/aws/bin \
            https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource WebInstance \
            --region ${AWS::Region} \
            --configsets full_install

          /opt/aws/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource WebInstance \
            --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_aws_cli
            - install_and_enable_cfn_hup
            - install_docker
            - install_node
            - install_nginx
            - install_certbot
            - install_hydra
            - update_hydra
            - install_oryfm
            - update_and_build_oryfm
            - install_cert_tools
            - run_cert_tools
          update:
            - update_hydra
            - update_and_build_oryfm
            - run_cert_tools

        install_aws_cli:
          packages:
            apt:
              jq: []
              python3-pip: []
          commands:
            01_install_awscli:
              command: yes | pip3 install awscli --upgrade --user

        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebInstance --configsets update --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: root
              group: root
          commands:
            01_enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02_start_cfn_hup:
              command: systemctl start cfn-hup.service

        install_docker:
          packages:
            apt:
              apt-transport-https: []
              ca-certificates: []
              curl: []
              gnupg2: []
              software-properties-common: []
          commands:
            01_add_repository_key:
              command: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            02_add_repository:
              command: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            03_update_apt_get:
              command: apt-get update
            04_install_docker:
              command: apt-get install -y docker-ce
            05_add_ubuntu_to_group:
              command: usermod -aG docker ubuntu

        install_node:
          commands:
            01_add_repository:
              command: curl -sL https://deb.nodesource.com/setup_12.x | bash -
            02_install_node:
              command: apt-get install -y nodejs

        install_nginx:
          commands:
            01_install:
              command: apt-get install -y nginx

        install_certbot:
          packages:
            apt:
              software-properties-common: []
          commands:
            01_add_universe:
              command: add-apt-repository universe
            02_add_repository:
              command: add-apt-repository ppa:certbot/certbot
            03_update_apt_get:
              command: apt-get update
            04_install_certbot:
              command: apt-get install -y certbot python-certbot-nginx

        install_hydra:
          packages:
            apt:
              pwgen: []
          commands:
            01_create_postgres_secret:
              command: echo "POSTGRES_SECRET=$(pwgen -s 32 1)" >> /etc/hydra-secrets.env
            02_create_system_secret:
              command: echo "SYSTEM_SECRET=$(pwgen -s 32 1)" >> /etc/hydra-secrets.env
            03_create_database_url:
              command: env $(cat /etc/hydra-secrets.env | xargs) bash -c 'echo "POSTGRES_URL=postgres://hydra:$POSTGRES_SECRET@ory-postgres:5432/hydra?sslmode=disable" >> /etc/hydra-secrets.env'
            04_setup_internal_host:
              command: echo "127.0.0.1 hydra-admin.local" >> /etc/hosts
            05_create_hydra_network:
              command: docker network create hydra
            06_install_postgres:
              command: !Sub |
                env $(cat /etc/hydra-secrets.env | xargs) bash -c 'docker run \
                  --network hydra \
                  --name ory-postgres \
                  --restart always \
                  -e POSTGRES_USER=hydra \
                  -e POSTGRES_PASSWORD=$POSTGRES_SECRET \
                  -e POSTGRES_DB=hydra \
                  -d postgres:9.6 \
                '

        update_hydra:
          packages:
            apt:
              apache2-utils: []
          files:
            /etc/nginx/sites-available/hydra-public.conf:
              content: !Sub |
                server {
                    listen 80;
                    server_name ${HydraPublicDomainName};

                    location / {
                        proxy_pass http://127.0.0.1:9000;
                        proxy_set_header X-Forwarded-Proto $scheme;
                    }
                }
              mode: "000644"
              owner: root
              group: root
            /etc/nginx/sites-enabled/hydra-public.conf:
              content: /etc/nginx/sites-available/hydra-public.conf
              mode: "120644"
              owner: root
              group: root
            /etc/nginx/sites-available/hydra-admin.conf:
              content: !Sub |
                server {
                    listen 80;
                    server_name ${HydraAdminDomainName};

                    location /clients {
                        auth_basic 'Client Administration';
                        auth_basic_user_file /etc/hydra-admin.htpasswd;

                        proxy_pass http://127.0.0.1:9001/clients;
                        proxy_set_header X-Forwarded-Proto $scheme;
                    }

                    location /oauth2/introspect {
                        proxy_pass http://127.0.0.1:9001/oauth2/introspect;
                        proxy_set_header X-Forwarded-Proto $scheme;
                    }
                }
              mode: "000644"
              owner: root
              group: root
            /etc/nginx/sites-enabled/hydra-admin.conf:
              content: /etc/nginx/sites-available/hydra-admin.conf
              mode: "120644"
              owner: root
              group: root
            /etc/nginx/sites-available/hydra-admin-local.conf:
              content: !Sub |
                server {
                  listen 127.0.0.1:80;
                  server_name hydra-admin.local;

                  location / {
                    proxy_pass http://127.0.0.1:9001;
                    proxy_set_header X-Forwarded-Proto https;
                  }
                }
              mode: "000644"
              owner: root
              group: root
            /etc/nginx/sites-enabled/hydra-admin-local.conf:
              content: /etc/nginx/sites-available/hydra-admin-local.conf
              mode: "120644"
              owner: root
              group: root
          commands:
            01_stop_hydra:
              command: docker stop ory-hydra || true
            02_remove_hydra:
              command: docker rm ory-hydra || true
            03_pull_hydra:
              command: docker pull oryd/hydra:v1.3
            04_migrate_database:
              command: env $(cat /etc/hydra-secrets.env | xargs) bash -c 'docker run --rm --network hydra oryd/hydra:v1.3 migrate sql "$POSTGRES_URL" --yes'
            05_start_hydra:
              command: !Sub |
                env $(cat /etc/hydra-secrets.env | xargs) bash -c 'docker run -d \
                  --name ory-hydra \
                  --network hydra \
                  --restart always \
                  -p 127.0.0.1:9000:4444 \
                  -p 127.0.0.1:9001:4445 \
                  -e SERVE_TLS_ALLOW_TERMINATION_FROM=172.18.0.0/16 \
                  -e SERVE_PUBLIC_CORS_ENABLED=true \
                  -e SECRETS_SYSTEM=$SYSTEM_SECRET \
                  -e DSN=$POSTGRES_URL \
                  -e URLS_SELF_ISSUER=https://${HydraPublicDomainName}/ \
                  -e URLS_CONSENT=https://${OryFmDomainName}/consent \
                  -e URLS_LOGIN=https://${OryFmDomainName}/login \
                  -e URLS_LOGOUT=https://${OryFmDomainName}/logout \
                  -e URLS_ERROR=https://${OryFmDomainName}/error \
                  oryd/hydra:v1.3 serve all \
                '
            06_create_htpasswd:
              command: !Sub |
                /root/.local/bin/aws secretsmanager get-secret-value --region ${AWS::Region} \
                  --secret-id ${HydraAdminSecret} --query SecretString --output text \
                  | htpasswd -ci /etc/hydra-admin.htpasswd admin
            07_reload_nginx:
              command: systemctl reload nginx
            08_install_hydra_public_cert:
              command: !Sub |
                certbot install -n --nginx --redirect --cert-name ${HydraPublicDomainName} || true
            09_install_hydra_admin_cert:
              command: !Sub |
                certbot install -n --nginx --redirect --cert-name ${HydraAdminDomainName} || true

        install_oryfm:
          packages:
            apt:
              git: []
          users:
            oryfm:
              homeDir:
                /opt/oryfm
          commands:
            01_create_directory:
              command: mkdir -p /opt/oryfm
            02_chown_directory:
              command: chown oryfm:oryfm /opt/oryfm
            03_clone:
              command: runuser -l -s /bin/bash oryfm -c 'git clone https://github.com/soliantconsulting/oryfm.git /opt/oryfm/server'

        update_and_build_oryfm:
          files:
            /opt/oryfm/server/.env:
              content: !Sub |
                FILEMAKER_URL=${FileMakerUrl}
                FILEMAKER_DATABASE=${FileMakerDatabase}
                FILEMAKER_USERNAME=${FileMakerUsername}
                FILEMAKER_PASSWORD=${FileMakerPassword}
                FILEMAKER_LAYOUT=${FileMakerLayout}
                LOGIN_USER_REMEMBER_TIME=${OryFmUserLoginRememberTime}
                CONSENT_USER_REMEMBER_TIME=${OryFmUserConsentRememberTime}
                HYDRA_ADMIN_URL=http://hydra-admin.local
                THEME_CSS_URL=${OryFmThemeCssUrl}
                AUTHENTICATION_METHOD=${OryFmAuthenticationMethod}
                TEST_MODE=${OryFmTestMode}
                NODE_ENV=production
              mode: "000644"
              owner: oryfm
              group: oryfm
            /lib/systemd/system/oryfm.service:
              content: !Sub |
                [Unit]
                Description=OryFM instance
                After=network.target

                [Service]
                Type=simple
                User=oryfm
                WorkingDirectory=/opt/oryfm/server
                ExecStart=/usr/bin/node /opt/oryfm/server/dist/serve.js
                Restart=on-failure

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: root
              group: root
            /etc/nginx/sites-available/oryfm.conf:
              content: !Sub |
                server {
                  listen 80;
                  server_name ${OryFmDomainName};

                  location / {
                    proxy_set_header X-Forwarded-Host $host;
                    proxy_pass http://127.0.0.1:3000;
                  }
                }
              mode: "000644"
              owner: root
              group: root
            /etc/nginx/sites-enabled/oryfm.conf:
              content: /etc/nginx/sites-available/oryfm.conf
              mode: "120644"
              owner: root
              group: root
            /usr/local/bin/update-custom-labels.sh:
              content: !Sub |
                #!/bin/bash

                URL="${OryFmCustomLabelsUrl}"
                OLD_SUM="NONE"
                TMP="/tmp/custom-labels.json"
                TARGET="/opt/oryfm/server/custom-labels.json"

                if [ -f "$TARGET" ]
                then
                  OLD_SUM=$(md5sum "$TARGET" | awk '{ print $1 }')
                fi

                if [ -z "$URL" ]
                  then
                  rm -f "$TARGET"

                  if [ "$OLD_SUM" != "NONE" ]
                  then
                    systemctl restart oryfm
                  fi

                  exit 0
                fi

                curl "$URL" -o "$TMP"

                if [ $? != 0 ]
                  then
                  exit 0
                fi

                NEW_SUM=$(md5sum "$TMP" | awk '{ print $1 }')

                if [ "$OLD_SUM" != "$NEW_SUM" ]
                then
                  cp -a "$TMP" "$TARGET"
                  rm -f "$TMP"
                  chown portal:portal "$TARGET"
                  systemctl restart oryfm
                fi
              mode: "000755"
              owner: root
              group: root
            /etc/cron.d/update-custom-labels:
              content: !Sub |
                */15 * * * * root /usr/local/bin/update-custom-labels.sh
              mode: "000644"
              owner: root
              group: root
          commands:
            01_update:
              command: runuser -s /bin/bash -l oryfm -c 'cd /opt/oryfm/server && git pull'
            02_install:
              command: runuser -s /bin/bash -l oryfm -c 'cd /opt/oryfm/server && npm install'
            03_build:
              command: runuser -s /bin/bash -l oryfm -c 'cd /opt/oryfm/server && npm run build'
            04_reload_daemon:
              command: systemctl daemon-reload
            05_enable_daemon:
              command: systemctl enable oryfm
            06_restart_daemon:
              command: systemctl restart oryfm
            07_reload_nginx:
              command: systemctl reload nginx
            08_force_update_custom_labels:
              command: /usr/local/bin/update-custom-labels.sh
            09_install_cert:
              command: !Sub |
                certbot install -n --nginx --redirect --cert-name ${OryFmDomainName} || true

        install_cert_tools:
          packages:
            apt:
              dnsutils: []
          files:
            /usr/local/sbin/cert-register:
              content: !Sub |
                #!/bin/bash
                domain=$1

                until certbot -n -m "${LetsEncryptEmailAddress}" --agree-tos --redirect --nginx -d $domain
                do
                  echo "Sleeping for 15 minutes"
                  sleep 900
                done
              mode: "000755"
              owner: root
              group: root
            /usr/local/sbin/cert-update:
              content: !Sub |
                #!/bin/bash
                domains=("$@")
                existingDomains=()

                if [[ -d "/etc/letsencrypt/live" ]]; then
                  for path in /etc/letsencrypt/live/*/; do
                    domain=$(basename -- "$path")
                    existingDomains+=("$domain")
                  done
                fi

                for existingDomain in "${!existingDomains[@]}"; do
                  exists="false"

                  for domain in "${!domains[@]}"; do
                    if [[ "$domain" == "$existingDomain" ]]; then
                      exists="true"
                      break
                    fi
                  done

                  if [[ $exists == "false" ]]; then
                    certbot delete --cert-name $existingDomain
                  fi
                done

                for domain in "${!domains[@]}"; do
                  exists="false"

                  for existingDomain in "${!existingDomains[@]}"; do
                    if [[ "$domain" == "$existingDomain" ]]; then
                      exists="true"
                      break
                    fi
                  done

                  if [[ $exists == "false" ]]; then
                    echo "Running cert-register for $domain"
                    /usr/local/sbin/cert-register $domain
                  else
                    echo "No update for $domain required"
                  fi
                done
              mode: "000755"
              owner: root
              group: root

        run_cert_tools:
          commands:
            01_run_cert_update:
              command: !Sub |
                start-stop-daemon -Sbx /usr/local/sbin/cert-update -- ${HydraPublicDomainName} ${HydraAdminDomainName} ${OryFmDomainName} &

Outputs:
  InstanceIp:
    Value: !Ref InstanceIp
    Description: "Instance IP"
